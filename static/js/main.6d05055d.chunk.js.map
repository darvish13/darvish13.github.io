{"version":3,"sources":["components/pages/home/Home.js","components/Sandbox.js","components/Router.js","components/loading/LoadingCircular.js","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js","components/waves/waves_styles.js","components/pages/home/home_styles.js","components/waves/HandleInputs.js","components/table/table_styles.js","components/table/tableAssets/tableAssets.js","components/table/Table.js","components/header/header_styles.js","components/header/Header.js"],"names":["Home","Header","href","style","color","marginTop","to","Sandbox","useState","ExelData","setExelData","type","onChange","a","files","target","readExel","fileData","parsedData","map","row","cell","id","makeId","data","Table","ABlue","lazy","Router","exact","path","component","Main","styled","main","LoadingCircular","class","App","fallback","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration","Container","div","Spacer","height","Grid","cols","gap","align","justify","Subtitle","h2","Small","small","InputsRow","Col","margin","InputWrapper","LoadingWrapper","RemoveField","DeleteIcon","DeleteForever","HR","hr","Page","PTitle","P","p","TestCard","addInput","list","setList","listKeyName","localDbKey","localForage","getItem","localDB","setItem","batchAddInput","newList","RenderInputs","index","name","value","updatedList","label","defaultValue","variant","fullWidth","onClick","splice","RenderParams","readFromExcel","setCurrentFieldData","openDataTable","marginRight","values","size","startIcon","RenderParamInputs","listIndex","background","aria-label","selected","addParamInput","updatedValues","LocalDB","placeholder","batchAddParamInput","newValues","BaseCell","TitleCell","DataCell","isSelected","HollowCell","Row","Cell","selectedCells","setSelectedCells","IsSelected","setIsSelected","useEffect","duplicate","find","filter","currentFieldData","closeModal","SelectedCells","addCellsToForm","Button","marginBottom","backgroundColor","opacity","length","rowIndex","cellIndex","includes","mobile","header","Title","b"],"mappings":"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","file":"static/js/main.6d05055d.chunk.js","sourcesContent":["import { Container, P, Page, PTitle, TestCard } from './home_styles'\nimport Header from '../../header/Header'\nimport { Link } from 'react-router-dom'\n\nconst Home = () => (\n  <>\n    <Header />\n\n    <Container>\n      <Page>\n        <PTitle>ABOUT</PTitle>\n        <P>\n          Hello everyone, this app is a personal project i made for my wife to\n          help with her lab calculations. The initial idea was to make a\n          calculator for the Alamar Blue test which has a very complicated\n          equation with lots of parameters. I will add more tests to the app\n          later on. The app is free to use for everyone. Feel free to give me\n          your feedback to help imporove the app.\n          <br />\n          <a\n            href='https://www.linkedin.com/in/alireza-lavasani-alfri'\n            style={{ color: '#38afff' }}\n          >\n            https://www.linkedin.com/in/alireza-lavasani-alfri\n          </a>\n          <br />\n          <br /> Hope you enjoy it.\n        </P>\n\n        <PTitle style={{ marginTop: '5em' }}>Available Tests:</PTitle>\n\n        <Link to='/ablue'>\n          <TestCard>\n            <span>Alamar Blue</span>\n          </TestCard>\n        </Link>\n      </Page>\n    </Container>\n  </>\n)\n\nexport default Home\n","import React, { useState } from 'react'\nimport readExel from 'read-excel-file'\nimport Table from './table/Table'\nimport { generate as makeId } from 'shortid'\n\nconst Sandbox = () => {\n  const [ExelData, setExelData] = useState([])\n\n  return (\n    <>\n      <h1>Sandbox</h1>\n      <input\n        type='file'\n        onChange={async ({ target: { files } }) => {\n          const fileData = await readExel(files[0])\n          const parsedData = fileData.map(row =>\n            row.map(cell => ({ id: makeId(), data: cell }))\n          )\n\n          setExelData(parsedData)\n        }}\n      />\n\n      <Table data={ExelData} />\n    </>\n  )\n}\n\nexport default Sandbox\n","import { lazy } from 'react'\nimport { Route, Switch } from 'react-router-dom'\nimport Home from './pages/home/Home'\nimport Sandbox from './Sandbox'\n\nconst ABlue = lazy(() => import('./Calculator'))\n\nconst Router = () => {\n  return (\n    <>\n      <Switch>\n        <Route exact path='/' component={Home} />\n        <Route path='/ablue' component={ABlue} />\n        <Route path='/sandbox' component={Sandbox} />\n      </Switch>\n    </>\n  )\n}\n\nexport default Router\n","import React from 'react'\nimport styled from 'styled-components'\n\nconst Main = styled.main`\n  width: 100%;\n  height: 100vh;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`\n\nconst LoadingCircular = () => {\n  return (\n    <>\n      <Main>\n        <div class='lds-ripple'>\n          <div></div>\n          <div></div>\n        </div>\n      </Main>\n    </>\n  )\n}\n\nexport default LoadingCircular\n","import { Suspense } from 'react'\nimport { BrowserRouter } from 'react-router-dom'\nimport Router from './components/Router'\nimport LoadingCircular from './components/loading/LoadingCircular'\n\nconst App = () => (\n  <BrowserRouter>\n    <Suspense fallback={<LoadingCircular />}>\n      <Router />\n    </Suspense>\n  </BrowserRouter>\n)\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register()\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n","import { Fab } from '@material-ui/core'\nimport { DeleteForever } from '@material-ui/icons'\nimport styled from 'styled-components'\n\nconst MobileWidth = '620px'\n\nexport const Container = styled.div`\n  padding: 1em 0.25em;\n`\n\nexport const Spacer = styled.div`\n  height: ${({ height }) => height || '1em'};\n`\n\nexport const Grid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(${({ cols }) => cols}, 1fr);\n  grid-gap: ${({ gap }) => (gap ? gap : '2em')};\n  align-items: ${({ align }) => align || 'start'};\n  justify-content: ${({ justify }) => justify || 'start'};\n`\n\nexport const Subtitle = styled.h2`\n  font-size: 1.15em;\n  color: #4f5963;\n`\n\nexport const Small = styled.small`\n  color: gray;\n  font-weight: lighter;\n  font-size: 0.65em;\n`\n\nexport const InputsRow = styled.div`\n  display: flex;\n  overflow-x: auto;\n`\n\nexport const Col = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-start;\n  align-items: center;\n  width: 100%;\n  margin: ${({ margin }) => margin || 0};\n`\n\nexport const InputWrapper = styled.div`\n  margin: 0.5em 0;\n  min-width: 13vw;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  position: relative;\n\n  @media (max-width: ${MobileWidth}) {\n    min-width: 37vw;\n  }\n`\n\nexport const LoadingWrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  margin: 4em auto;\n`\n\nexport const RemoveField = styled.div`\n  position: absolute;\n  top: -0.5em;\n  right: -0.5em;\n  width: 2em;\n  height: 2em;\n  border-radius: 100%;\n  cursor: pointer;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: #f0f0f0;\n  box-shadow: 0px 1px 1px -1px rgba(0, 0, 0, 0.2),\n    0px 2px 5px 0px rgba(0, 0, 0, 0.14), 0px 1px 5px 0px rgba(0, 0, 0, 0.12);\n`\n\nexport const DeleteIcon = styled(DeleteForever)`\n  font-size: 1.25em;\n  color: red;\n`\n\nexport const HR = styled.hr`\n  margin: 2em auto 1em auto;\n`\n","import styled from 'styled-components'\n\nconst mobile = '700px'\n\nexport const Container = styled.div`\n  width: 100%;\n  max-width: 1400px;\n  margin: auto;\n`\n\nexport const Page = styled.div`\n  padding: 3em 0;\n  width: 100%;\n\n  @media (max-width: ${mobile}) {\n    padding: 3em 2em;\n  }\n`\n\nexport const PTitle = styled.div`\n  color: gray;\n  font-size: 1.1em;\n  margin-bottom: 2em;\n`\n\nexport const P = styled.p`\n  color: darkgray;\n  font-size: 0.9em;\n  text-align: justify;\n`\n\nexport const TestCard = styled.div`\n  width: 10em;\n  height: 10em;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  box-shadow: rgba(0, 0, 0, 0.12) 0px 1px 3px, rgba(0, 0, 0, 0.24) 0px 1px 2px;\n  transition: all ease-in-out 0.2s;\n  cursor: pointer;\n\n  &:hover {\n    transform: scale(1.025);\n  }\n\n  span {\n    color: gray;\n    font-size: 0.9em;\n  }\n`\n","import { Button, Fab, TextField } from '@material-ui/core'\r\nimport { Add, DeleteForeverOutlined } from '@material-ui/icons'\r\nimport localForage from 'localforage'\r\nimport {\r\n  DeleteIcon,\r\n  InputsRow,\r\n  InputWrapper,\r\n  RemoveField,\r\n  Col,\r\n  Spacer,\r\n} from './waves_styles'\r\nimport { generate as makeId } from 'shortid'\r\n\r\n/**************************************\r\n ******** Add Input\r\n *************************************/\r\nexport const addInput = async ({ list, setList, listKeyName, localDbKey }) => {\r\n  setList([...list, { id: makeId(), data: 0 }])\r\n\r\n  const localDB = await localForage.getItem(localDbKey)\r\n  await localForage.setItem(localDbKey, {\r\n    ...localDB,\r\n    [listKeyName]: [...list, { id: makeId(), data: 0 }],\r\n  })\r\n}\r\n\r\n/**************************************\r\n ******** Batch Add Input\r\n *************************************/\r\nexport const batchAddInput = async ({\r\n  newList,\r\n  setList,\r\n  listKeyName,\r\n  localDbKey,\r\n}) => {\r\n  setList(newList)\r\n\r\n  const localDB = await localForage.getItem(localDbKey)\r\n  await localForage.setItem(localDbKey, {\r\n    ...localDB,\r\n    [listKeyName]: newList,\r\n  })\r\n}\r\n\r\n/**************************************\r\n ******** Render Inputs\r\n *************************************/\r\nexport const RenderInputs = ({ list, setList, listKeyName, localDbKey }) =>\r\n  list.map(({ id, data }, index) => (\r\n    <InputWrapper key={id}>\r\n      <TextField\r\n        name={`posCtrl_${index + 1}`}\r\n        value={data}\r\n        onChange={async ({ target: { value } }) => {\r\n          let updatedList = [...list]\r\n          updatedList[index] = { id, data: value }\r\n          setList(updatedList)\r\n\r\n          const localDB = await localForage.getItem(localDbKey)\r\n          await localForage.setItem(localDbKey, {\r\n            ...localDB,\r\n            [listKeyName]: updatedList,\r\n          })\r\n        }}\r\n        label={`Absorbance ${index + 1}`}\r\n        defaultValue={0}\r\n        variant='outlined'\r\n        fullWidth\r\n      />\r\n\r\n      <RemoveField\r\n        onClick={async () => {\r\n          let updatedList = [...list]\r\n          updatedList.splice(index, 1)\r\n\r\n          setList(updatedList)\r\n\r\n          const localDB = await localForage.getItem(localDbKey)\r\n          await localForage.setItem(localDbKey, {\r\n            ...localDB,\r\n            [listKeyName]: updatedList,\r\n          })\r\n        }}\r\n      >\r\n        <DeleteIcon />\r\n      </RemoveField>\r\n    </InputWrapper>\r\n  ))\r\n\r\n/**************************************\r\n ******** Render Params\r\n *************************************/\r\nexport const RenderParams = ({\r\n  list,\r\n  setList,\r\n  listKeyName,\r\n  localDbKey,\r\n  readFromExcel,\r\n  setCurrentFieldData,\r\n  openDataTable,\r\n}) => (\r\n  <InputsRow style={{ marginRight: '-1.5em' }}>\r\n    {list.map(({ name, values }, index) => (\r\n      <Col margin='0 0.85em' key={index}>\r\n        <Spacer />\r\n\r\n        <Button\r\n          variant='outlined'\r\n          size='small'\r\n          color='secondary'\r\n          startIcon={<DeleteForeverOutlined />}\r\n          onClick={async () => {\r\n            let updatedList = [...list]\r\n            updatedList.splice(index, 1)\r\n            setList(updatedList)\r\n\r\n            const localDB = await localForage.getItem(localDbKey)\r\n            await localForage.setItem(localDbKey, {\r\n              ...localDB,\r\n              [listKeyName]: updatedList,\r\n            })\r\n          }}\r\n        >\r\n          Del Param {index + 1}\r\n        </Button>\r\n\r\n        <Spacer />\r\n\r\n        <InputWrapper>\r\n          <TextField\r\n            value={name}\r\n            onChange={async ({ target: { value } }) => {\r\n              let updatedList = [...list]\r\n              updatedList[index].name = value\r\n              setList(updatedList)\r\n\r\n              const localDB = await localForage.getItem(localDbKey)\r\n              await localForage.setItem(localDbKey, {\r\n                ...localDB,\r\n                [listKeyName]: updatedList,\r\n              })\r\n            }}\r\n            label={`Param ${index + 1}`}\r\n            name={`Param ${index + 1}`}\r\n            fullWidth\r\n          />\r\n        </InputWrapper>\r\n\r\n        <Spacer />\r\n\r\n        <RenderParamInputs\r\n          listIndex={index}\r\n          values={values}\r\n          list={list}\r\n          setList={setList}\r\n          listKeyName={listKeyName}\r\n          localDbKey={localDbKey}\r\n        />\r\n\r\n        <Spacer />\r\n\r\n        <Fab\r\n          size='small'\r\n          style={{ background: '#38afff', color: 'white' }}\r\n          aria-label='add'\r\n          onClick={() => {\r\n            if (readFromExcel) {\r\n              setCurrentFieldData({\r\n                type: 'param',\r\n                data: {\r\n                  selected: values,\r\n                  listIndex: index,\r\n                  list,\r\n                  setList,\r\n                  listKeyName,\r\n                  localDbKey,\r\n                },\r\n              })\r\n\r\n              openDataTable()\r\n            } else\r\n              addParamInput({\r\n                listIndex: index,\r\n                values,\r\n                list,\r\n                setList,\r\n                listKeyName,\r\n                localDbKey,\r\n              })\r\n          }}\r\n        >\r\n          <Add />\r\n        </Fab>\r\n\r\n        <Spacer />\r\n      </Col>\r\n    ))}\r\n\r\n    <Col margin='0 0.85em'>\r\n      <Spacer />\r\n\r\n      <Fab\r\n        variant='extended'\r\n        size='small'\r\n        style={{ background: '#38afff', color: 'white', marginRight: '2em' }}\r\n        aria-label='add'\r\n        onClick={async () => {\r\n          setList([\r\n            ...list,\r\n            {\r\n              name: '',\r\n              values: [],\r\n            },\r\n          ])\r\n\r\n          const localDB = await localForage.getItem(localDbKey)\r\n          await localForage.setItem(localDbKey, {\r\n            ...localDB,\r\n            [listKeyName]: [\r\n              ...list,\r\n              {\r\n                name: '',\r\n                values: [],\r\n              },\r\n            ],\r\n          })\r\n        }}\r\n      >\r\n        <Add />\r\n        Param\r\n      </Fab>\r\n    </Col>\r\n  </InputsRow>\r\n)\r\n\r\n/**************************************\r\n ******** Render Param Inputs\r\n *************************************/\r\nconst RenderParamInputs = ({\r\n  listIndex,\r\n  values,\r\n  list,\r\n  setList,\r\n  listKeyName,\r\n  localDbKey,\r\n}) =>\r\n  values.map(({ id, data }, index) => (\r\n    <InputWrapper key={index}>\r\n      <TextField\r\n        value={data}\r\n        onChange={async ({ target: { value } }) => {\r\n          let updatedValues = [...values]\r\n          updatedValues[index] = { id, data: value }\r\n\r\n          let updatedList = [...list]\r\n          updatedList[listIndex].values = updatedValues\r\n\r\n          setList(updatedList)\r\n\r\n          const LocalDB = await localForage.getItem(localDbKey)\r\n          await localForage.setItem(localDbKey, {\r\n            ...LocalDB,\r\n            [listKeyName]: updatedList,\r\n          })\r\n        }}\r\n        variant='outlined'\r\n        label={`Absorbance ${index + 1}`}\r\n        name={`Absorbance ${index + 1}`}\r\n        placeholder='New Parameter'\r\n        fullWidth\r\n      />\r\n\r\n      <RemoveField\r\n        onClick={async () => {\r\n          let updatedValues = [...values]\r\n          updatedValues.splice(index, 1)\r\n\r\n          let updatedList = [...list]\r\n          updatedList[listIndex].values = updatedValues\r\n\r\n          setList(updatedList)\r\n\r\n          const localDB = await localForage.getItem(localDbKey)\r\n          await localForage.setItem(localDbKey, {\r\n            ...localDB,\r\n            [listKeyName]: updatedList,\r\n          })\r\n        }}\r\n      >\r\n        <DeleteIcon />\r\n      </RemoveField>\r\n    </InputWrapper>\r\n  ))\r\n\r\n/**************************************\r\n ******** Add Param Input\r\n *************************************/\r\nexport const addParamInput = async ({\r\n  listIndex,\r\n  values,\r\n  list,\r\n  setList,\r\n  listKeyName,\r\n  localDbKey,\r\n}) => {\r\n  let updatedValues = [...values, { id: makeId(), data: 0 }]\r\n  let updatedList = [...list]\r\n  updatedList[listIndex].values = updatedValues\r\n\r\n  setList(updatedList)\r\n\r\n  const localDB = await localForage.getItem(localDbKey)\r\n  await localForage.setItem(localDbKey, {\r\n    ...localDB,\r\n    [listKeyName]: updatedList,\r\n  })\r\n}\r\n\r\n/**************************************\r\n ******** Batch Add Param Input\r\n *************************************/\r\nexport const batchAddParamInput = async ({\r\n  listIndex,\r\n  newValues,\r\n  list,\r\n  setList,\r\n  listKeyName,\r\n  localDbKey,\r\n}) => {\r\n  let updatedList = [...list]\r\n  updatedList[listIndex].values = newValues\r\n\r\n  setList(updatedList)\r\n\r\n  const localDB = await localForage.getItem(localDbKey)\r\n  await localForage.setItem(localDbKey, {\r\n    ...localDB,\r\n    [listKeyName]: updatedList,\r\n  })\r\n}\r\n","import styled from 'styled-components'\n\nexport const Container = styled.div`\n  max-width: 70em;\n  margin: auto;\n  display: flex;\n  flex-direction: column;\n  padding: 2em;\n\n  @media (max-width: 700px) {\n    padding: 1em;\n    width: 95%;\n    overflow-x: auto;\n  }\n`\n\nexport const BaseCell = styled.div`\n  font-size: 0.85em;\n  border-radius: 10px;\n  margin: 0.25em;\n  min-width: 5em;\n  min-height: 3em;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  cursor: pointer;\n  transition: all ease-in 0.15s;\n\n  b {\n    margin-bottom: 0.1em;\n    user-select: none;\n  }\n`\n\nexport const TitleCell = styled(BaseCell)`\n  border: 1px solid #ff1744;\n  color: white;\n  background-color: #ff1744;\n  cursor: initial;\n  user-select: none;\n`\n\nexport const DataCell = styled(BaseCell)`\n  border: 1px solid #38afff;\n  color: ${({ isSelected }) => (isSelected ? 'white' : '#38afff')};\n  background-color: ${({ isSelected }) => (isSelected ? '#38afff' : 'white')};\n\n  /* &:hover {\n    background-color: #d7efff;\n    color: #38afff;\n  } */\n`\n\nexport const HollowCell = styled(BaseCell)`\n  border: none;\n  color: black;\n  cursor: initial;\n`\n\nexport const Row = styled.div`\n  display: flex;\n`\n","import React, { useEffect, useState } from 'react'\r\nimport { DataCell } from '../table_styles'\r\n\r\nexport const Cell = ({\r\n  id,\r\n  data,\r\n  selectedCells,\r\n  setSelectedCells,\r\n  isSelected,\r\n}) => {\r\n  /**************************************\r\n   ******** State\r\n   *************************************/\r\n  const [IsSelected, setIsSelected] = useState(isSelected)\r\n\r\n  /**************************************\r\n   ******** Watch isSelected\r\n   *************************************/\r\n  useEffect(() => {\r\n    setIsSelected(isSelected)\r\n  }, [isSelected])\r\n\r\n  /**************************************\r\n   ******** Render\r\n   *************************************/\r\n  return (\r\n    <>\r\n      <DataCell\r\n        onClick={() => {\r\n          setIsSelected(!IsSelected)\r\n\r\n          const duplicate = selectedCells.find(({ id: cellId }) => cellId == id)\r\n\r\n          if (duplicate)\r\n            setSelectedCells(\r\n              selectedCells.filter(({ id: cellId }) => cellId != id)\r\n            )\r\n          else setSelectedCells([...selectedCells, { id, data }])\r\n        }}\r\n        isSelected={IsSelected}\r\n      >\r\n        <b>{data}</b>\r\n      </DataCell>\r\n    </>\r\n  )\r\n}\r\n","/* eslint-disable default-case */\r\nimport { Button } from '@material-ui/core'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { batchAddInput, batchAddParamInput } from '../waves/HandleInputs'\r\nimport { Cell } from './tableAssets/tableAssets'\r\nimport { Container, HollowCell, Row, TitleCell } from './table_styles'\r\n\r\nconst Table = ({ data, currentFieldData, closeModal }) => {\r\n  console.log('***', currentFieldData)\r\n\r\n  /**************************************\r\n   ******** State\r\n   *************************************/\r\n  const [SelectedCells, setSelectedCells] = useState([])\r\n\r\n  /**************************************\r\n   ******** Watch selected\r\n   *************************************/\r\n  useEffect(() => {\r\n    if (currentFieldData.data.selected)\r\n      setSelectedCells(currentFieldData.data.selected)\r\n  }, [currentFieldData.data.selected])\r\n\r\n  /******************************************\r\n   ******** add selected cells to main form\r\n   ******************************************/\r\n  const addCellsToForm = () => {\r\n    const { type, data } = currentFieldData\r\n\r\n    switch (type) {\r\n      case 'input':\r\n        batchAddInput({\r\n          ...data,\r\n          newList: SelectedCells,\r\n        })\r\n        break\r\n\r\n      case 'param':\r\n        batchAddParamInput({\r\n          ...data,\r\n          newValues: SelectedCells,\r\n        })\r\n        break\r\n    }\r\n\r\n    closeModal()\r\n  }\r\n\r\n  /**************************************\r\n   ******** render\r\n   *************************************/\r\n  return (\r\n    <>\r\n      <Container>\r\n        <Button\r\n          variant='contained'\r\n          onClick={addCellsToForm}\r\n          style={{\r\n            marginBottom: '2em',\r\n            backgroundColor: '#38afff',\r\n            color: 'white',\r\n            opacity: SelectedCells.length == 0 ? 0 : 1,\r\n          }}\r\n        >\r\n          Add Cells\r\n        </Button>\r\n\r\n        {data.map((row, rowIndex) => (\r\n          <Row key={rowIndex}>\r\n            {row.map(({ id, data }, cellIndex) => {\r\n              // empty cells\r\n              if (!data) return <HollowCell key={id} />\r\n              // title cells\r\n              else if (rowIndex == 0 || cellIndex == 0)\r\n                return <TitleCell key={id}>{data}</TitleCell>\r\n              // wavelength cells\r\n              else if (cellIndex == row.length - 1)\r\n                return <HollowCell key={id}>{data}</HollowCell>\r\n\r\n              // data cells\r\n              return (\r\n                <Cell\r\n                  key={id}\r\n                  id={id}\r\n                  selectedCells={SelectedCells}\r\n                  setSelectedCells={setSelectedCells}\r\n                  data={data}\r\n                  isSelected={SelectedCells.map(({ id }) => id).includes(id)}\r\n                />\r\n              )\r\n            })}\r\n          </Row>\r\n        ))}\r\n\r\n        <Button\r\n          variant='contained'\r\n          onClick={addCellsToForm}\r\n          style={{\r\n            marginTop: '2em',\r\n            backgroundColor: '#38afff',\r\n            color: 'white',\r\n            opacity: SelectedCells.length == 0 ? 0 : 1,\r\n          }}\r\n        >\r\n          Add Cells\r\n        </Button>\r\n      </Container>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Table\r\n","import styled from 'styled-components'\n\nconst mobile = '700px'\n\nexport const Container = styled.div`\n  width: 100%;\n  max-width: 1400px;\n  margin: auto;\n`\n\nexport const Main = styled.header`\n  background-color: #38afff;\n  color: white;\n  padding: 1em 0;\n  display: flex;\n  align-items: center;\n  width: 100%;\n  height: 4em;\n  box-shadow: rgba(0, 0, 0, 0.24) 0px 3px 8px;\n\n  @media (max-width: ${mobile}) {\n    padding: 1em 2em;\n  }\n`\n\nexport const Title = styled.b`\n  color: white;\n  font-size: 1.5em;\n\n  @media (max-width: ${mobile}) {\n    font-size: 1.2em;\n  }\n`","import { Link } from 'react-router-dom'\r\nimport { Container, Main, Title } from './header_styles'\r\n\r\nconst Header = () => {\r\n  return (\r\n    <>\r\n      <Main>\r\n        <Container>\r\n          <Link to='/'>\r\n            <Title>Alfri Scientific Calculator</Title>\r\n          </Link>\r\n        </Container>\r\n      </Main>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Header\r\n"],"sourceRoot":""}