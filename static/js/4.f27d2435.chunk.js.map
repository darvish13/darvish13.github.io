{"version":3,"sources":["components/colorimetric/colorimetric_styles.js","components/table/DataTableModal.js","components/waves/DataForm.js","components/waves/Calculations.js","components/chooseMethod/chooseMethod_styles.js","components/chooseMethod/ChooseMethod.js","components/colorimetric/Colorimetric.js","components/Calculator.js"],"names":["MobileWidth","Container","styled","main","Card","div","Title","h1","TabBar","nav","Tab","selected","Paragraph","p","ResultList","ResultRow","Key","span","Value","b","DataTableModal","open","handleClose","data","currentFieldData","Dialog","fullScreen","onClose","AppBar","style","position","Toolbar","IconButton","edge","color","onClick","aria-label","Close","Table","closeModal","DataForm","tabName","setIsFirstTime","useState","Loading","setLoading","OxRdPair","setOxRdPair","PosCtrls","setPosCtrls","NegCtrls","setNegCtrls","name","values","Params","setParams","anchorEl","setAnchorEl","IsDataTableOpen","setIsDataTableOpen","ExcelData","setExcelData","ReadFromExcel","setReadFromExcel","CurrentFieldData","setCurrentFieldData","Boolean","id","undefined","useEffect","getLocalValues","a","localForage","getItem","localBaseDB","excelData","localDB","key","oxid","reduced","posCtrls","negCtrls","params","value","openDataTable","CircularProgress","textTransform","cols","gap","align","Button","variant","size","startIcon","DeleteForeverOutlined","event","currentTarget","Popover","anchorOrigin","vertical","horizontal","transformOrigin","padding","clear","window","location","href","marginBottom","TextField","select","onChange","target","oxRdPair","setItem","label","fullWidth","MenuItem","height","list","setList","listKeyName","localDbKey","Fab","background","type","addInput","Add","readFromExcel","calcReduction","lower","higher","oxid_low","reduced_low","negCtrl_low","mean","map","concents_low","oxid_high","reduced_high","negCtrl_high","concents_high","headers","results","index","concent_low","calcDiffer","posCtrl_low","posCtrl_high","Row","ChooseMethod","Header","to","download","marginLeft","width","marginRight","base","isFirstTime","component","backgroundColor","hidden","files","readExel","fileData","parsedData","row","cell","makeId","Colorimetric","TabName","setTabName","Results","setResults","Headers","setHeaders","IsFirstTime","setLocalData","RenderResults","parseInt","filter","BlurOn","border","BlurLinearOutlined","textAlign","textDecoration","filename","theme","createMuiTheme","palette","common","black","white","paper","default","primary","light","dark","contrastText","secondary","Calculator","StylesProvider","injectFirst"],"mappings":"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","file":"static/js/4.f27d2435.chunk.js","sourcesContent":["import styled from 'styled-components'\n\nconst MobileWidth = '620px'\n\nexport const Container = styled.main`\n  max-width: 85%;\n  margin: auto;\n\n  @media (max-width: ${MobileWidth}) {\n    max-width: 100%;\n  }\n`\n\nexport const Card = styled.div`\n  margin: 4em 0;\n  padding: 1em 2em;\n  border-radius: 5px;\n  position: relative;\n  overflow: hidden;\n  padding-top: 3.5em;\n  box-shadow: 0px 2px 1px -1px rgba(0, 0, 0, 0.2),\n    0px 1px 1px 0px rgba(0, 0, 0, 0.14), 0px 1px 3px 0px rgba(0, 0, 0, 0.12);\n\n  @media (max-width: ${MobileWidth}) {\n    margin: 0;\n    padding: 1em;\n    padding-top: 3.5em;\n    border-radius: 0;\n    box-shadow: none;\n  }\n`\n\nexport const Title = styled.h1`\n  background-color: #38afff;\n  color: white;\n  font-size: 1.75em;\n  font-weight: bold;\n  text-align: left;\n  position: absolute;\n  top: 0;\n  left: 0;\n  margin-top: 0;\n  width: 100%;\n  padding: 0.3em 1em;\n\n  @media (max-width: ${MobileWidth}) {\n    font-size: 1.25em;\n    padding: 0.6em;\n  }\n`\n\nexport const TabBar = styled.nav`\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  background: #aaddff;\n  border-radius: 5px;\n  overflow: hidden;\n  margin: 3em auto 0 auto;\n`\n\nexport const Tab = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  cursor: pointer;\n  width: 100%;\n  height: 2.5em;\n  color: white;\n  font-weight: bold;\n  font-size: 1.25em;\n  background-color: ${({ selected }) => (selected ? '#38afff' : 'transparent')};\n  transition: all ease-in 0.2s;\n  /* text-transform: uppercase; */\n\n  @media (max-width: ${MobileWidth}) {\n    font-size: 0.95em;\n  }\n`\n\nexport const Paragraph = styled.p`\n  color: #4f5963;\n  font-size: 1em;\n  font-weight: 500;\n\n  @media (max-width: ${MobileWidth}) {\n    font-size: 0.9em;\n  }\n`\n\nexport const ResultList = styled.div``\n\nexport const ResultRow = styled.div`\n  display: grid;\n  grid-template-columns: 8em auto;\n  grid-gap: 2em;\n  margin: 1em 0;\n  border-bottom: 1px solid lightblue;\n  padding-bottom: 0.5em;\n`\n\nexport const Key = styled.span`\n  color: #4f5963;\n`\n\nexport const Value = styled.b`\n  color: #38afff;\n  font-size: 1.1em;\n`\n","import {\r\n  AppBar,\r\n  Button,\r\n  Dialog,\r\n  IconButton,\r\n  Slide,\r\n  Toolbar,\r\n} from '@material-ui/core'\r\nimport { Close } from '@material-ui/icons'\r\nimport React from 'react'\r\nimport Table from './Table'\r\n\r\n/**************************************\r\n ******** Data Table Modal\r\n *************************************/\r\nconst DataTableModal = ({ open, handleClose, data, currentFieldData }) => (\r\n  <Dialog\r\n    fullScreen\r\n    open={open}\r\n    onClose={handleClose}\r\n    // TransitionComponent={Transition}\r\n  >\r\n    <AppBar style={{ position: 'relative' }}>\r\n      <Toolbar>\r\n        <IconButton\r\n          edge='start'\r\n          color='inherit'\r\n          onClick={handleClose}\r\n          aria-label='close'\r\n        >\r\n          <Close />\r\n        </IconButton>\r\n\r\n        <b>Excel Data Table</b>\r\n      </Toolbar>\r\n    </AppBar>\r\n\r\n    <Table\r\n      data={data}\r\n      currentFieldData={currentFieldData}\r\n      closeModal={handleClose}\r\n    />\r\n  </Dialog>\r\n)\r\n\r\nexport default DataTableModal\r\n","import {\r\n  Container,\r\n  Grid,\r\n  Col,\r\n  Small,\r\n  Spacer,\r\n  Subtitle,\r\n  LoadingWrapper,\r\n  HR,\r\n} from './waves_styles'\r\nimport {\r\n  Button,\r\n  CircularProgress,\r\n  TextField,\r\n  Fab,\r\n  Popover,\r\n  MenuItem,\r\n} from '@material-ui/core'\r\nimport { useEffect, useState } from 'react'\r\nimport localForage from 'localforage'\r\nimport { Add, DeleteForeverOutlined } from '@material-ui/icons'\r\nimport { addInput, RenderInputs, RenderParams } from './HandleInputs'\r\nimport { Paragraph } from '../colorimetric/colorimetric_styles'\r\nimport DataTableModal from '../table/DataTableModal'\r\n\r\n/**\r\n * Data form\r\n */\r\nconst DataForm = ({ tabName, setIsFirstTime }) => {\r\n  /**************************************\r\n   ******** State\r\n   *************************************/\r\n  const [Loading, setLoading] = useState(true)\r\n  // const [Oxid, setOxid] = useState()\r\n  // const [Reduced, setReduced] = useState()\r\n  const [OxRdPair, setOxRdPair] = useState()\r\n  const [PosCtrls, setPosCtrls] = useState([])\r\n  const [NegCtrls, setNegCtrls] = useState([])\r\n  const [Params, setParams] = useState([{ name: '', values: [] }])\r\n  const [anchorEl, setAnchorEl] = useState(null)\r\n  const [IsDataTableOpen, setIsDataTableOpen] = useState(false)\r\n  const [ExcelData, setExcelData] = useState([])\r\n  const [ReadFromExcel, setReadFromExcel] = useState(false)\r\n  const [CurrentFieldData, setCurrentFieldData] = useState()\r\n\r\n  /**************************************\r\n   ******** Handle Click\r\n   *************************************/\r\n  const handleClick = event => {\r\n    setAnchorEl(event.currentTarget)\r\n  }\r\n\r\n  /**************************************\r\n   ******** Handle Close\r\n   *************************************/\r\n  const handleClose = () => {\r\n    setAnchorEl(null)\r\n  }\r\n\r\n  const open = Boolean(anchorEl)\r\n  const id = open ? 'simple-popover' : undefined\r\n\r\n  /*************************************************\r\n   ******** Get initial values from local database\r\n   *************************************************/\r\n  useEffect(() => {\r\n    getLocalValues()\r\n  }, [])\r\n\r\n  /*************************************************\r\n   ******** Get initial values when tab changes\r\n   *************************************************/\r\n  useEffect(() => {\r\n    getLocalValues()\r\n  }, [tabName])\r\n\r\n  /**************************************\r\n   ******** Get local values\r\n   *************************************/\r\n  const getLocalValues = async () => {\r\n    // check if mode is read from excel\r\n    const localBaseDB = await localForage.getItem('base')\r\n    const { excelData } = localBaseDB\r\n    if (excelData) {\r\n      setExcelData(excelData)\r\n      setReadFromExcel(true)\r\n    }\r\n\r\n    // load local values in state\r\n    const localDB = await localForage.getItem(tabName)\r\n    if (localDB) {\r\n      const { key, oxid, reduced, posCtrls, negCtrls, params } = localDB\r\n\r\n      // oxid ? setOxid(oxid) : setOxid(0)\r\n      // reduced ? setReduced(reduced) : setReduced(0)\r\n      oxid ? setOxRdPair({ key, value: [oxid, reduced] }) : setOxRdPair()\r\n      posCtrls && setPosCtrls(posCtrls)\r\n      negCtrls && setNegCtrls(negCtrls)\r\n      params && setParams(params)\r\n    }\r\n\r\n    setLoading(false)\r\n  }\r\n\r\n  /**************************************\r\n   ******** Data table funcs\r\n   *************************************/\r\n  const openDataTable = () => setIsDataTableOpen(true)\r\n  const closeDataTable = () => setIsDataTableOpen(false)\r\n\r\n  /**************************************\r\n   ******** Render\r\n   *************************************/\r\n  if (Loading)\r\n    return (\r\n      <LoadingWrapper>\r\n        <CircularProgress />\r\n      </LoadingWrapper>\r\n    )\r\n\r\n  return (\r\n    <>\r\n      <Container>\r\n        <Subtitle>\r\n          <b style={{ textTransform: 'capitalize' }}>{tabName}</b> Wavelengths\r\n          Data Form:\r\n        </Subtitle>\r\n\r\n        <Spacer />\r\n        <Grid cols={2} gap='1em' align='center'>\r\n          <small style={{ color: '#ff1744' }}>Clear previous data?</small>\r\n\r\n          <Button\r\n            variant='outlined'\r\n            size='small'\r\n            color='secondary'\r\n            startIcon={<DeleteForeverOutlined />}\r\n            onClick={handleClick}\r\n          >\r\n            Reset Form\r\n          </Button>\r\n\r\n          <Popover\r\n            id={id}\r\n            open={open}\r\n            anchorEl={anchorEl}\r\n            onClose={handleClose}\r\n            anchorOrigin={{\r\n              vertical: 'center',\r\n              horizontal: 'left',\r\n            }}\r\n            transformOrigin={{\r\n              vertical: 'center',\r\n              horizontal: 'right',\r\n            }}\r\n          >\r\n            <Grid cols={2} align='center' style={{ padding: '1em' }}>\r\n              <b style={{ color: '#ff1744' }}>Are you sure?</b>\r\n\r\n              <Button\r\n                variant='contained'\r\n                color='secondary'\r\n                size='small'\r\n                onClick={async () => {\r\n                  // await localForage.setItem(tabName, null)\r\n                  await localForage.clear()\r\n                  setIsFirstTime(false)\r\n                  window.location.href = '/ablue'\r\n                }}\r\n              >\r\n                CLEAR\r\n              </Button>\r\n            </Grid>\r\n          </Popover>\r\n        </Grid>\r\n        <Spacer />\r\n\r\n        <form>\r\n          <HR />\r\n          <Subtitle>Extinction Coefficients</Subtitle>\r\n\r\n          {OxRdPair && (\r\n            <div style={{ marginBottom: '1em' }}>\r\n              <b>{OxRdPair.key}</b>\r\n              <br />\r\n              <span>Oxid: {OxRdPair.value[0]}</span>\r\n              <br />\r\n              <span>Reduced: {OxRdPair.value[1]}</span>\r\n            </div>\r\n          )}\r\n\r\n          <TextField\r\n            select\r\n            value={OxRdPair}\r\n            onChange={async ({ target: { value } }) => {\r\n              setOxRdPair(value)\r\n\r\n              const { key, value: oxRdPair } = value\r\n              const [oxid, reduced] = oxRdPair\r\n\r\n              const localDB = await localForage.getItem(tabName)\r\n              await localForage.setItem(tabName, {\r\n                ...localDB,\r\n                key,\r\n                oxid,\r\n                reduced,\r\n              })\r\n            }}\r\n            label='Oxidised (O) _ Reduced (R)'\r\n            fullWidth\r\n          >\r\n            <MenuItem\r\n              key={tabName == 'lower' ? 1 : 3}\r\n              value={\r\n                tabName == 'lower'\r\n                  ? { key: 540, value: [47619, 104395] }\r\n                  : { key: 600, value: [117216, 14652] }\r\n              }\r\n            >\r\n              {tabName == 'lower' ? '540' : '600'}\r\n            </MenuItem>\r\n\r\n            <MenuItem\r\n              key={tabName == 'lower' ? 2 : 4}\r\n              value={\r\n                tabName == 'lower'\r\n                  ? { key: 570, value: [80586, 155677] }\r\n                  : { key: 630, value: [34798, 5494] }\r\n              }\r\n            >\r\n              {tabName == 'lower' ? '570' : '630'}\r\n            </MenuItem>\r\n          </TextField>\r\n\r\n          {/* <Grid cols={2}>\r\n          <TextField\r\n            select\r\n            value={Oxid}\r\n            onChange={async ({ target: { value } }) => {\r\n              setOxid(value)\r\n\r\n              const localDB = await localForage.getItem(tabName)\r\n              await localForage.setItem(tabName, {\r\n                ...localDB,\r\n                oxid: value,\r\n              })\r\n            }}\r\n            label='Oxidised (O)'\r\n            // defaultValue={Oxid || 0}\r\n            placeholder={tabName == 'lower' ? '' : ''}\r\n            fullWidth\r\n          >\r\n            <MenuItem key='540' value={47619}>\r\n              540\r\n            </MenuItem>\r\n\r\n            <MenuItem key='570' value={80586}>\r\n              570\r\n            </MenuItem>\r\n          </TextField>\r\n\r\n          <TextField\r\n            value={Reduced}\r\n            onChange={async ({ target: { value } }) => {\r\n              setReduced(value)\r\n\r\n              const localDB = await localForage.getItem(tabName)\r\n              await localForage.setItem(tabName, {\r\n                ...localDB,\r\n                reduced: value,\r\n              })\r\n            }}\r\n            label='Reduced (R)'\r\n            // defaultValue={Reduced || 0}\r\n            placeholder={tabName == 'lower' ? '' : ''}\r\n            fullWidth\r\n            select\r\n          >\r\n            <MenuItem key='540' value={104395}>\r\n              540\r\n            </MenuItem>\r\n\r\n            <MenuItem key='570' value={155677}>\r\n              570\r\n            </MenuItem>\r\n          </TextField>\r\n        </Grid> */}\r\n\r\n          <Spacer height='1.5em' />\r\n\r\n          <HR />\r\n          <Subtitle>Controls</Subtitle>\r\n          <Paragraph>\r\n            Use <b style={{ color: '#38afff' }}>+</b> button to add more values\r\n          </Paragraph>\r\n\r\n          <Grid cols={2} gap='1.5em'>\r\n            <Col>\r\n              <Subtitle>\r\n                Negative Control\r\n                <br />\r\n                <Small>( alamarBlue + only media )</Small>\r\n              </Subtitle>\r\n\r\n              <Col>\r\n                <RenderInputs\r\n                  list={NegCtrls}\r\n                  setList={setNegCtrls}\r\n                  listKeyName='negCtrls'\r\n                  localDbKey={tabName}\r\n                />\r\n                <Spacer />\r\n\r\n                <Fab\r\n                  size='small'\r\n                  aria-label='add'\r\n                  style={{ background: '#38afff', color: 'white' }}\r\n                  onClick={() => {\r\n                    if (ReadFromExcel) {\r\n                      setCurrentFieldData({\r\n                        type: 'input',\r\n                        data: {\r\n                          selected: NegCtrls,\r\n                          setList: setNegCtrls,\r\n                          listKeyName: 'negCtrls',\r\n                          localDbKey: tabName,\r\n                        },\r\n                      })\r\n\r\n                      openDataTable()\r\n                    } else\r\n                      addInput({\r\n                        list: NegCtrls,\r\n                        setList: setNegCtrls,\r\n                        listKeyName: 'negCtrls',\r\n                        localDbKey: tabName,\r\n                      })\r\n                  }}\r\n                >\r\n                  <Add />\r\n                </Fab>\r\n              </Col>\r\n            </Col>\r\n\r\n            <Col>\r\n              <Subtitle>\r\n                Positive Control\r\n                <br />\r\n                <Small>( alamarBlue + media + cells )</Small>\r\n              </Subtitle>\r\n\r\n              <Col>\r\n                <RenderInputs\r\n                  list={PosCtrls}\r\n                  setList={setPosCtrls}\r\n                  listKeyName='posCtrls'\r\n                  localDbKey={tabName}\r\n                />\r\n\r\n                <Spacer />\r\n\r\n                <Fab\r\n                  size='small'\r\n                  style={{ background: '#38afff', color: 'white' }}\r\n                  aria-label='add'\r\n                  onClick={() => {\r\n                    if (ReadFromExcel) {\r\n                      setCurrentFieldData({\r\n                        type: 'input',\r\n                        data: {\r\n                          selected: PosCtrls,\r\n                          setList: setPosCtrls,\r\n                          listKeyName: 'posCtrls',\r\n                          localDbKey: tabName,\r\n                        },\r\n                      })\r\n\r\n                      openDataTable()\r\n                    } else\r\n                      addInput({\r\n                        list: PosCtrls,\r\n                        setList: setPosCtrls,\r\n                        listKeyName: 'posCtrls',\r\n                        localDbKey: tabName,\r\n                      })\r\n                  }}\r\n                >\r\n                  <Add />\r\n                </Fab>\r\n              </Col>\r\n            </Col>\r\n          </Grid>\r\n\r\n          <HR />\r\n          <Subtitle>Experimental Parametrs</Subtitle>\r\n          <Paragraph>\r\n            Use <b style={{ color: '#38afff', color: 'white' }}>+ Param</b>{' '}\r\n            button to add more parameters\r\n          </Paragraph>\r\n\r\n          <RenderParams\r\n            list={Params}\r\n            setList={setParams}\r\n            listKeyName='params'\r\n            localDbKey={tabName}\r\n            readFromExcel={ReadFromExcel}\r\n            setCurrentFieldData={setCurrentFieldData}\r\n            openDataTable={openDataTable}\r\n          />\r\n        </form>\r\n      </Container>\r\n\r\n      {ReadFromExcel && (\r\n        <DataTableModal\r\n          open={IsDataTableOpen}\r\n          handleClose={closeDataTable}\r\n          data={ExcelData}\r\n          currentFieldData={CurrentFieldData}\r\n        />\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default DataForm\r\n","import localForage from 'localforage'\r\nimport { mean } from 'mathjs'\r\n\r\n/**\r\n * Calculate Reduction\r\n */\r\nexport const calcReduction = async () => {\r\n  const lower = await localForage.getItem('lower')\r\n  const higher = await localForage.getItem('higher')\r\n\r\n  if (lower && higher) {\r\n    // oxid and reduced of lower wavelengths\r\n    const { oxid: oxid_low, reduced: reduced_low } = lower\r\n\r\n    // average of lower wavelength controls\r\n    const negCtrl_low = mean(lower.negCtrls.map(({ data }) => data))\r\n\r\n    // average of different concentrations of lower wavelengths\r\n    const concents_low = lower.params.map(({ name, values }) => ({\r\n      name,\r\n      value: mean(values.map(({ data }) => data)),\r\n    }))\r\n\r\n    // oxid and reduced of higher wavelengths\r\n    const { oxid: oxid_high, reduced: reduced_high } = higher\r\n\r\n    // average of higher wavelength controls\r\n    const negCtrl_high = mean(higher.negCtrls.map(({ data }) => data))\r\n\r\n    // average of different concentrations of higher wavelengths\r\n    const concents_high = higher.params.map(({ name, values }) => ({\r\n      name,\r\n      value: mean(values.map(({ data }) => data)),\r\n    }))\r\n\r\n    let headers = [\r\n      { label: 'Parameter', key: 'name' },\r\n      { label: 'Value', key: 'value' },\r\n    ]\r\n\r\n    const results = concents_low.map(({ name, value: concent_low }, index) => ({\r\n      name,\r\n      value:\r\n        ((oxid_high * concent_low - oxid_low * concents_high[index].value) /\r\n          (reduced_low * negCtrl_high - reduced_high * negCtrl_low)) *\r\n        100,\r\n    }))\r\n\r\n    return { headers, results }\r\n  }\r\n\r\n  return []\r\n}\r\n\r\n/**\r\n * Calculate difference\r\n */\r\nexport const calcDiffer = async () => {\r\n  const lower = await localForage.getItem('lower')\r\n  const higher = await localForage.getItem('higher')\r\n\r\n  if (lower && higher) {\r\n    // oxid and reduced of lower wavelengths\r\n    const { oxid: oxid_low } = lower\r\n\r\n    // average of lower wavelength controls\r\n    const posCtrl_low = mean(lower.posCtrls.map(({ data }) => data))\r\n\r\n    // average of different concentrations of lower wavelengths\r\n    const concents_low = lower.params.map(({ name, values }) => ({\r\n      name,\r\n      value: mean(values.map(({ data }) => data)),\r\n    }))\r\n\r\n    // oxid and reduced of higher wavelengths\r\n    const { oxid: oxid_high } = higher\r\n\r\n    // average of higher wavelength controls\r\n    const posCtrl_high = mean(higher.posCtrls.map(({ data }) => data))\r\n\r\n    // average of different concentrations of higher wavelengths\r\n    const concents_high = higher.params.map(({ name, values }) => ({\r\n      name,\r\n      value: mean(values.map(({ data }) => data)),\r\n    }))\r\n\r\n    let headers = [\r\n      { label: 'Parameter', key: 'name' },\r\n      { label: 'Value', key: 'value' },\r\n    ]\r\n\r\n    const results = concents_low.map(({ name, value: concent_low }, index) => ({\r\n      name,\r\n      value:\r\n        ((oxid_high * concent_low - oxid_low * concents_high[index].value) /\r\n          (oxid_high * posCtrl_low - oxid_low * posCtrl_high)) *\r\n        100,\r\n    }))\r\n\r\n    return { headers, results }\r\n  }\r\n}\r\n","import styled from 'styled-components'\n\nexport const Row = styled.div`\n  display: flex;\n\n  @media (max-width: 700px) {\n    grid-template-columns: 1fr;\n  }\n`\n","import { Button } from '@material-ui/core'\r\nimport React from 'react'\r\nimport { Row } from './chooseMethod_styles'\r\nimport readExel from 'read-excel-file'\r\nimport { generate as makeId } from 'shortid'\r\nimport localForage from 'localforage'\r\nimport Header from '../header/Header'\r\nimport { Container, P, Page, PTitle } from '../pages/home/home_styles'\r\nimport { Link } from 'react-router-dom'\r\n\r\nconst ChooseMethod = ({ setIsFirstTime }) => {\r\n  return (\r\n    <>\r\n      <Header />\r\n\r\n      <Container>\r\n        <Page>\r\n          <PTitle>Alamar Blue Test</PTitle>\r\n\r\n          <P style={{ marginBottom: '4em' }}>\r\n            AlamarBlue is a cell viability assay reagent which contains the cell\r\n            permeable, non-toxic, and weakly fluorescent blue indicator dye\r\n            called resazurin. This is a trusted and established reagent which\r\n            has been available since 1993. alamarBlue is a useful non-toxic\r\n            alternative to the commonly used MTT cell viability assay\r\n            (3-(4,5-dimethylthiazol-2-yl)-2,5-diphenyl-tetrazolium bromide)\r\n            (O’Brien et al. 2000). alamarBlue quantitatively measures\r\n            proliferation in human, animal, bacterial, fungal, and mycobacterial\r\n            cells. It is useful for cytokine bioassays, cell viability assays,\r\n            and in vitro cytotoxicity determinations as well as cell growth\r\n            monitoring.\r\n          </P>\r\n\r\n          <PTitle>How do you want to input your data?</PTitle>\r\n\r\n          <P style={{ marginBottom: '2em' }}>\r\n            You can either input your parameters manually or you can use the\r\n            test results excel file generated by your microplate reader.\r\n            Technically you should be able to use any excel file but at the\r\n            moment the formatting of the file should like this:\r\n            <Link\r\n              to='/sample.xlsx'\r\n              target='_blank'\r\n              download\r\n              style={{ color: '#38afff', marginLeft: '1em' }}\r\n            >\r\n              SAMPLE EXCEL FILE\r\n            </Link>\r\n          </P>\r\n\r\n          <Row>\r\n            <Button\r\n              variant='contained'\r\n              style={{ width: '13em', marginRight: '2em' }}\r\n              onClick={async () => {\r\n                const base = await localForage.getItem('base')\r\n                await localForage.setItem('base', {\r\n                  ...base,\r\n                  isFirstTime: false,\r\n                })\r\n\r\n                setIsFirstTime(false)\r\n              }}\r\n            >\r\n              Manually\r\n            </Button>\r\n\r\n            <Button\r\n              variant='contained'\r\n              component='label'\r\n              style={{\r\n                width: '13em',\r\n                backgroundColor: '#38afff',\r\n                color: 'white',\r\n              }}\r\n            >\r\n              <input\r\n                type='file'\r\n                hidden\r\n                onChange={async ({ target: { files } }) => {\r\n                  const fileData = await readExel(files[0])\r\n                  const parsedData = fileData.map(row =>\r\n                    row.map(cell => ({ id: makeId(), data: cell }))\r\n                  )\r\n\r\n                  const base = await localForage.getItem('base')\r\n                  await localForage.setItem('base', {\r\n                    ...base,\r\n                    excelData: parsedData,\r\n                    isFirstTime: false,\r\n                  })\r\n\r\n                  setIsFirstTime(false)\r\n                }}\r\n              />\r\n              From Excel File\r\n            </Button>\r\n          </Row>\r\n        </Page>\r\n      </Container>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default ChooseMethod\r\n","import {\r\n  Card,\r\n  Title,\r\n  TabBar,\r\n  Tab,\r\n  Container,\r\n  Paragraph,\r\n  ResultList,\r\n  ResultRow,\r\n  Key,\r\n  Value,\r\n} from './colorimetric_styles'\r\nimport { useEffect, useState } from 'react'\r\nimport DataForm from '../waves/DataForm'\r\n// import HigherWaves from '../waves/HigherWaves'\r\nimport localForage from 'localforage'\r\nimport {\r\n  Grid,\r\n  HR,\r\n  LoadingWrapper,\r\n  Spacer,\r\n  Subtitle,\r\n} from '../waves/waves_styles'\r\nimport { Button, CircularProgress, Fab } from '@material-ui/core'\r\nimport { BlurLinearOutlined, BlurOn, FilterNone } from '@material-ui/icons'\r\nimport { calcDiffer, calcReduction } from '../waves/Calculations'\r\nimport { CSVLink } from 'react-csv'\r\nimport ChooseMethod from '../chooseMethod/ChooseMethod'\r\n\r\n/**\r\n * Colorimetrics\r\n */\r\nconst Colorimetric = () => {\r\n  /**************************************\r\n   ******** States\r\n   *************************************/\r\n  const [TabName, setTabName] = useState('lower')\r\n  const [Loading, setLoading] = useState(true)\r\n  const [Results, setResults] = useState([])\r\n  const [Headers, setHeaders] = useState([])\r\n  const [IsFirstTime, setIsFirstTime] = useState(true)\r\n\r\n  /**************************************\r\n   ******** Mount\r\n   *************************************/\r\n  useEffect(() => {\r\n    setLocalData()\r\n  }, [])\r\n\r\n  /*********************************************\r\n   ********Setting state values in indexedDB\r\n   *********************************************/\r\n  const setLocalData = async () => {\r\n    const lower = await localForage.getItem('lower')\r\n    const higher = await localForage.getItem('higher')\r\n    const base = await localForage.getItem('base')\r\n\r\n    if (!base) {\r\n      await localForage.setItem('base', {\r\n        ...base,\r\n        isFirstTime: true,\r\n      })\r\n    } else if (base) setIsFirstTime(base.isFirstTime)\r\n\r\n    if (!lower) {\r\n      await localForage.setItem('lower', {\r\n        posCtrls: [],\r\n        negCtrls: [],\r\n        params: [{ name: '', values: [] }],\r\n      })\r\n    }\r\n\r\n    if (!higher) {\r\n      await localForage.setItem('higher', {\r\n        posCtrls: [],\r\n        negCtrls: [],\r\n        params: [{ name: '', values: [] }],\r\n      })\r\n    }\r\n\r\n    setLoading(false)\r\n  }\r\n\r\n  /**************************************\r\n   ******** Render Results\r\n   *************************************/\r\n  const RenderResults = () =>\r\n    Results.map(({ name, value }) => (\r\n      <ResultRow>\r\n        <Key>{name}:</Key>\r\n        <Value>{parseInt(value * 100) / 100}</Value>\r\n      </ResultRow>\r\n    ))\r\n\r\n  /**************************************\r\n   ******** Loading\r\n   *************************************/\r\n  if (Loading)\r\n    return (\r\n      <LoadingWrapper>\r\n        <CircularProgress />\r\n      </LoadingWrapper>\r\n    )\r\n\r\n  /**************************************\r\n   ******** First Time\r\n   *************************************/\r\n  if (IsFirstTime) return <ChooseMethod setIsFirstTime={setIsFirstTime} />\r\n\r\n  /**************************************\r\n   ******** Render\r\n   *************************************/\r\n  return (\r\n    <>\r\n      <Container>\r\n        <Card\r\n          style={{\r\n            backgroundColor: '#f2faff',\r\n            filter: TabName == 'lower' ? 'none' : 'hue-rotate(135deg)',\r\n          }}\r\n        >\r\n          <Title>Alamar Blue Colorimetric Calculator</Title>\r\n          <Paragraph>\r\n            Use the two tabs below to input your data separated by lower\r\n            wavelengths and higher wavelengths into the forms.\r\n          </Paragraph>\r\n          {/* <Divider /> */}\r\n\r\n          <TabBar>\r\n            <Tab\r\n              onClick={() => setTabName('lower')}\r\n              selected={TabName === 'lower'}\r\n            >\r\n              Lower Wavelength\r\n            </Tab>\r\n\r\n            <Tab\r\n              onClick={() => setTabName('higher')}\r\n              selected={TabName === 'higher'}\r\n            >\r\n              Higher Wavelength\r\n            </Tab>\r\n          </TabBar>\r\n\r\n          {/* <RenderTabs /> */}\r\n          <DataForm tabName={TabName} setIsFirstTime={setIsFirstTime} />\r\n\r\n          <HR />\r\n          <Subtitle>Calculations</Subtitle>\r\n\r\n          <Spacer />\r\n\r\n          <Grid cols={2} gap='2em'>\r\n            <Fab\r\n              variant='extended'\r\n              size='small'\r\n              style={{ background: '#38afff', color: 'white' }}\r\n              aria-label='add'\r\n              onClick={async () => {\r\n                const { headers, results } = await calcDiffer()\r\n                setHeaders(headers)\r\n                setResults(results)\r\n              }}\r\n            >\r\n              <BlurOn />\r\n              Difference\r\n            </Fab>\r\n\r\n            <Button\r\n              variant='outlined'\r\n              size='small'\r\n              style={{ color: '#38afff', border: '1px solid #74c7ff' }}\r\n              startIcon={<BlurLinearOutlined />}\r\n              onClick={async () => {\r\n                const { headers, results } = await calcReduction()\r\n                setHeaders(headers)\r\n                setResults(results)\r\n              }}\r\n            >\r\n              Reduction\r\n            </Button>\r\n          </Grid>\r\n\r\n          <Spacer />\r\n\r\n          <HR />\r\n          <Grid cols={2} align='center'>\r\n            <Subtitle>Results</Subtitle>\r\n\r\n            <div style={{ textAlign: 'right' }}>\r\n              <CSVLink\r\n                data={Results}\r\n                headers={Headers}\r\n                style={{ textDecoration: 'none', color: 'darkgray' }}\r\n                filename='Alamar_Blue_Results.csv'\r\n              >\r\n                <Button variant='contained'>\r\n                  <b>Download</b>\r\n                </Button>\r\n              </CSVLink>\r\n            </div>\r\n          </Grid>\r\n\r\n          <Spacer />\r\n\r\n          <ResultList>\r\n            <ResultRow>\r\n              <Key>\r\n                <b>Parameter</b>\r\n              </Key>\r\n\r\n              <Value>\r\n                <b>Value</b>\r\n              </Value>\r\n            </ResultRow>\r\n\r\n            <RenderResults />\r\n          </ResultList>\r\n\r\n          <Spacer />\r\n        </Card>\r\n      </Container>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Colorimetric\r\n","import { createMuiTheme, StylesProvider } from \"@material-ui/core\"\nimport { ThemeProvider } from \"styled-components\"\nimport Colorimetric from \"./colorimetric/Colorimetric\"\n\nconst theme = createMuiTheme({\n  palette: {\n    common: { black: '#000', white: '#fff' },\n    background: { paper: '#fff', default: '#fafafa' },\n    primary: {\n      light: '#74c7ff',\n      main: '#38afff',\n      dark: '#22608a',\n      contrastText: '#fff',\n    },\n    secondary: {\n      light: '#ff3e63',\n      main: '#ff1744',\n      dark: '#ca1336',\n      contrastText: '#fff',\n    },\n  },\n})\n\nconst Calculator = () => (\n  <StylesProvider injectFirst>\n    <ThemeProvider theme={theme}>\n      <Colorimetric />\n    </ThemeProvider>\n  </StylesProvider>\n)\n\nexport default Calculator\n"],"sourceRoot":""}